Main Features of Microservices?
	Microservices architecture breaks an application into smaller services, and developing and deploying each service independently is possible. 
		This makes the introduction of new features in an application much easier.
	Decentralization:
		Microservices architecture leads to distributed systems. The data management is decentralized. There will be a monolithic database containing all data belonging to the application.
		Each service has ownership of the data related to the business functionality of that service.
	Black box: 
		Every microservice is defined as a black box. The details of the complexity are hidden from other services/components.
	Security: 
		The Microservice platform should provide capabilities for certificate management, different types of credentials, authentication, and authentication based on RBAC (Role-based access model). Security is decoupled from the microservice development team as platform standardization helps with it.
	Polyglot:
		This is one of the significant aspects of microservices architecture.
		For example, if a team is working on one of the microservice using Java, Spring Boot, and MySQL, another team can work on another microservice using Python, Node JS, and NoSQL.
		Different microservices can use a different version of the same programming language. Eg. Python 2.7 and Python 3.0
     	Different microservices can use different programming languages.
		Different microservices can use different architectures as well.

What is the difference between Monolithic, SOA and Microservices Architecture?
	Monolithic Architecture is similar to a big container wherein all the software components of an application are assembled and tightly packaged.
	A Service-Oriented Architecture is a collection of services which communicate with each other.
	The communication can involve either simple data passing or it could involve two or more services coordinating some activity.
	Microservice Architecture is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.
	The main diff b/w SOA and MS architecture is Based on the sharing of data and info. SOA shares and reuses as much as possible while MS focuses on sharing as little as possible

How do microservices communicate with each other?
	In the case of Microservice Architecture, there are 2 different types of inter-service communication between microservices.
		a. Synchronous communication
		b. Asynchronous communication
		
***
In Microservice-based applications microservices with each other in the Producer-Consumer model.

Synchronous communication:
	In the case of Synchronous communication between microservices, the Producer waits for the response from the Consumer after sending a request for a given time limit(timeout). 
	We use HTTP Protocol via REST API, GraphQ, and Feign Client for interservice communication.
	
Asynchronous Communication:
	In the case of Asynchronous Communication, the Producer doesn't wait for the response from the Consumer after sending the request.
	The message producer service generates a message and sends the message to a message broker on a defined topic. 
	The message producer waits for only the acknowledgment from the message broker to know that message is received by the broker.
	The consuming service subscribes to a topic in the messaging queue.
	The response is received in the same methodology through a message broker via defined message topics.
	After the message reaches the consumer, it needs to send back ACK to the broker. If no acknowledgement gets to the broker, it will retry the delivery after some time. 
	The message producer service and consuming services don't even know each other and the broker is responsible for delivering the message. 
	Thus async messaging mitigates the biggest problem of synchronous communication - coupling.
	
	Different messaging tools are based on the AMQP (Advanced Message Queuing Protocol). Some examples are given below.
	a. Apache Kafka
	b. RabbitMQ
	c. Apache ActiveMQ

What if the message broker is down?
• A message broker is a vital part of the asynchronous architecture and hence must be fault-tolerant
• This can be achieved by setting up additional standby replicas that can do failover. Still, even with auxiliary replicas, failures of the messaging system might happen from time to time.
• If it's essential to ensure the message arrives at its destination, a broker might be configured to work in at least once mode. 

Types of Async communication
Commonly, there are two options in message-based communication:
• Point to Point
• Publisher-Subscriber

What is PTP Async communication
• PTP - A queue will be used for this type of messaging-based communication.
• The service that produces the message, which is called as producer (sender), will send the message to a queue in one message broker and the service that has an interest in that message, which is called a consumer (receiver), will consume the message from that queue and carry out further processes for that message
One message sent by a producer can be consumed by only one receiver and the message will be deleted after consumed.
• If the receiver or an interested service is down, the message will remain persistent in that queue until the receiver is up and consumes the message.
• For this reason, messaging-based communication is one of the best choices to make our microservices resilient.
• A popular choice for the queueing system is RabbitMQ, ActiveMQ

What is Publisher-Subscriber Async communication?
• In publisher-subscriber messaging-based communication, the topic in the message broker will be used to store the message sent by the publisher and then subscribers that subscribe to that topic will consume that message
• Unlike point to point pattern, the message will be ready to consume for all subscribers and the topic can have one or more subscribers. The message remains persistent in a topic until we delete it.
In messaging-based communication, the services that consume messages, either from queue or topic, must know the common message structure that is produced or published by the producer or publisher.
examples are Kafka, Amazon SNS etc

What is Event-Based Async communication (event-driven pattern)
Unlike messaging-based communication, in event-based communication, especially in event-driven patterns, the services that consume the message do not need to know the details of the message.
In an event-driven pattern, the services just push the event to the topic in the message broker and then the services that subscribe to that topic will react for each occurrence event in that topic.
Each event in the topic will be related to a specific business logic execution.

SAGA Design Pattern
Why SAGA ??
We know that Design pattern gives solutions to common problems faced by us "THE DEVELOPERS".
So What problem is solved by this SAGA design pattern?
• The problem started as soon as we moved from Monolithic application to Microservice Architecture.
• We will take the example of Swiggy and Zomato.
You
Choose your dishes,
Add them to the Cart and checkout
Make Payment
Order gets Delivered
Our order is marked as completed after delivery is successful.
• In monolithic it's not a problem as we have 1 database, and multiple Tables like Orders, Payments, Delivery Etc. Now in 1 Single Atomic transaction, we can do all these steps and if payment fails, everything gets rolled back.

Now we moved to microservices architecture and Segregated the whole Zomato or Swiggy application to
Order service
Payment service
• Delivery Service
• Now your order service accepts your order, the Payment service validates the payment done and the Delivery service is responsible for the delivery of your order to your home. When delivered successfully the orders are marked completed in the application. This is a happy case.
• Ever thought about the worst-case Delivery failing as no delivery partner was available? Your payment was done, Money got deducted and now No food. At Least we need to get the money back and the Order must be marked as cancelled.
• For this to happen we need a Transaction rollback. The transaction did get rolled back but only the scope of transaction was in Delivery service. The boundary for this transaction ended in Delivery service.

Now what about the order service and payment service ?? Neither your money is returned with this rollback nor your order status changed from waiting to failed / Cancelled. Such a bad user experience right ?
This is the classic example where your application completely failed to manage distributed transaction
(A transaction that spans across multiple Microservices). Now This is a problem and To handle such distributed transactions issues SAGA Design pattern came into the picture.

What is SAGA
• A saga is a sequence of local transactions.

• Each Saga has 2 Jobs to Do
Update the current Microservice and make the required changes.
Publish events to trigger the next transaction for the next microservices.

How does SAGA DP handle failure of any individual SAGA?
•
•
The saga pattern provides transaction management with using a sequence of local transactions of microservices. Every microservices has its own database and it can able to manage local transactions in an atomic way with strict consistency.
So saga pattern groups these local transactions and sequentially invoking them one by one. Each local transaction updates the database and publishes an event to trigger the next local transaction.
• If one of the steps fails, than saga patterns trigger to rollback transactions which are a set of compensating transactions that rollback the changes on previous microservices and restore data consistency.

Ways to Implement SAGA?
• There are two types of saga implementation ways choreography orchestration

What isthe  Choreography Saga Pattern?
• Choreography is a way to coordinate sagas where participants exchange events without a centralized point of control
• With choreography, each microservices run its own local transaction and publishes events to the message broker system and that triggers local transactions in other microservices.

Advantages of Choreography Saga Pattern?
• Good for simple workflows that require few participants and don't need a coordination logic
• Doesn't require additional service implementation and maintenance.
• Doesn't introduce a single point of failure, since the responsibilities are distributed across the saga participants.

Disadvantages of Choreography Saga Pattern?
• Workflow can become confusing when adding new steps, as it's difficult to track which saga participants listen to which commands.
• There's a risk of cyclic dependency between saga participants because they have to consume each other's commands
• Integration testing is difficult because all services must be running to simulate a transaction.

What is the Orchestration Saga Pattern?
• Orchestration is a way to coordinate sagas where a centralized controller tells the saga participants what local transactions to execute.
The saga orchestrator handles all the transactions and tells the participants which operation to perform based on events.
• The orchestrator°
executes saga requests,
stores and interprets the states of each task,
handles failure recovery with compensating transactions.

Advantages of Orchestration Saga Pattern?
• Good for complex workflows involving many participants or new participants added over time.

Suitable when there is control over every participant in the process and control over the flow of activities.
• Doesn't introduce cyclic dependencies, because the orchestrator unilaterally depends on the saga participants.
Saga participants don't need to know about commands from other participants. Clear separation of concerns simplifies business logic.

Disadvantages of Orchestration Saga Pattern?
• Additional design complexity requires an implementation of a coordination logic.
• There's an additional point of failure because the orchestrator manages the complete workflow.





How to design and implement a Microservices?
• Start with a monolith
• Organize Your Teams the Right Way
• Split the Monolith to Build a Microservices Architecture
• Build Your Microservices Architecture for Failure
• Emphasize Monitoring to Ease Microservices Testing
• Use CI/CD to make the employment process easy

Can you please provide examples of situations where using microservices over monolithic systems and vice versa is a better choice?
Scenarios where monolithic architecture is preferred over microservice Architecture
• Limited Complexity
Development Speed
• Resource Constraints
• Performance
• Team Size
• Learning Curve

Can you please provide examples of situations where using microservices over monolithic systems and vice versa is a better choice?
Scenarios where microservice architecture is preferred over monolithic Architecture
• Scalability
• Flexibility
Development Velocity
Team Structure
Complexity
Maintenance

How do you make sure a Microservices-based application can handle more users as it becomes more popular?
• Load Balancing
• Horizontal Scaling
Auto Scaling
Caching
Database Scaling
Asynchronous Processing

How to handle data consistency in a Microservices architecture?
•
Synchronous Communication
Asynchronous Communication
CQRS (Command Query Responsibility Segregation)
		CQRS suggests splitting the application into two parts — the command side and the query side. The command side handles the 		Create, Update, and Delete requests. The query side handles the query part by using the materialized views. The event sourcing pattern is generally used along with it to create events for any data change. Materialized views are kept updated by subscribing to the stream of events.
Event Sourcing
 		Triggering events (series of events)
Distributed Transaction
Saga Pattern
Monitoring and Logging
		Checks monitors and logs the data inconsistency
Conflict Resolution

What is the difference between SAGA and 2 Phase Commit? Which one will you prefer and why?
2 Phase Commit				Saga Pattern
Strong Consistency			Eventual Consistency
Synchronous				Asynchronous
Blocking				Non-Blocking
Complexity				Simplicity
Performance Overhead			Better Performance
Strong Data Consistency			Temporarily Inconsistency

What is 2phase and 3phase commits?
The Two-Phase Commit (2PC) is a distributed transaction protocol used for ensuring data consistency and integrity across multiple nodes in a distributed system.
Three-Phase Commit is an extension of the Two-Phase Commit (2PC) protocol, with an additional phase to improve fault tolerance. 
hree-Phase Commit. Unlike the two-phase commit protocol (2PC), 3PC is non-blocking.
3PC adds a timeout mechanism and a pre-commit stage to 2PC, which can better solve the single point of failure and blocking problems. 
