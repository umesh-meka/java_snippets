

What is MicroServices?
	Microservices is an architecture where the application is exposed as loosely coupled services that can be independently developed, 		
	deployed, and maintained. Each service exposed is referred to as Microservice. Each service performs a unique function.
	
	Speciality of this architecture is that polyglot architecture is supported. For example, if a team is working on one of the 			
	microservice using Java, Spring Boot, and MySQL, another team can work on another microservice using Python, Node IS, and N		oSQL.
	Different microservices can use a different version of the same programming language.
	Different microservices can use different programming languages.
	Different microservices can use different architectures as well.

Why MicroServices?
	In the case of monolith applications, there are several problems like
		Same code base for presentation, business layer, and data access layer. 
		Application is deployed as a single unit.
		Complex to maintain and scalability is an issue.
	Microservice solves the above problems.
	Microservices are ideal when a monolith or a legacy application needs to be modernized.
	Each service is independent and gives the flexibility to choose the programming language, database, and/or architecture.
	Distinct services can be developed, deployed, and maintained independently.

Pros of Microservices
	Freedom to use different technologies
	Each microservices focuses on single capability
	Supports individual deployable units
	Allow frequent software releases
	Ensures security of each service
	Multiple services are parallelly developed and deployed

Cons of Microservices
	Management of a large number of services is difficult.
	Communication between microservices is complex.
	Increased efforts for configuration and other operations
	Difficult to maintain transaction safety and data boundaries
	Due to the decentralized nature of microservices, more microservices will mean more resources hence high Investment
	Debugging of problems is harder unless the right instrumentation is followed during design and development.
	Microservices will need a large team size with the right mix of experience

When to use Microservices?
	Reduce time to market, Scalable better software,
	Lower costs,
	Faster development,
	Cloud-native development
	It makes sense to adopt a microservices architecture, if the team size is big enough as each service will require its team to 			develop, deploy and manage.
	Timeframe and skills of team members are a constraint.
	If fast results are required,
	Choose microservices architecture only if the team also has experience in microservices.

	Do not use this architecture for simple application which can be managed by monolithic application.
	So you use ask yourself first do we really need this microservice architecture to decouple the services as it comes with a cost

How does Microservice Architecture work?
	FE/Client ---> Security and Identity management ---> API Gateway ---> 	Microservice 1
										Microservice 2
										Microservice 3
											:
											:
										Microservice n

										Service Discovery
	
	Here all the services  will be registered with Service Discovery and Service Discovery will maintain the all info regarding the 
		microservices.
	Service Discovery (Service Registry) will maintain the all info like ports, etc.

Main Features of Microservices ?
	Microservices architecture breaks an application into smaller services, and it is possible to develop, deploy each service 			independently. 
		This makes the introduction of new features in an application very easier.
	Decentralization:
		Microservices architecture leads to distributed systems. The data management is decentralized. There will be a monolithic 		database containing all data belonging to the application.
		Each service has the ownership of the data related to the business functionality of that service.
	Black box: 
		Every microservice is defined as a black box. The details of the complexity are hidden from other services/components.
	Security: 
		The Microservice platform itself should provide capabilities for certificate management, different types of credentials, 		authentication, and authentication based on RBAC (Role-based access model). Security is decoupled from the microservice 		development team as platform standardization help with it.
	Polyglot:
		This is one of the significant aspects of microservices architecture.
		For example, if a team is working on one of the microservice using Java, Spring Boot, and MySQL, another team can work on 		another microservice using Python, Node JS, and NoSQL.
		Different microservices can use a different version of the same programming language. Eg. Python 2.7 and Python 3.0
     		Different microservices can use different programming languages.
		Different microservices can use different architectures as well.

How do microservices communicate with each other?
	In the case of Microservice Architecture, there are 2 different types of inter-service communication between microservices.
		a. Synchronous communication
		b. Asynchronous communication

Synchronous communication:
	In the case of Synchronous communication between microservices, the client service waits for the response within a time limit. The 		
	possible solution is using HTTP Protocol using via REST API for interservice communication.

Asynchronous Communication:
	In the case of Asynchronous Communication, the client service doesn't wait for the response from another service. When the client 		microservice calls another microservice, the thread is not blocked till a response comes from the server. The message 			producer service generates a message and sends the message to a message broker on a defined topic. The message producer waits 		for only the acknowledgment from the message broker to know that message is received by the broker.
	The consuming service subscribes to a topic in the messaging queue. All the messages belonging to that topic will be fed to the 		consuming systems). The message producer service and consuming services don't even know each other. The response is received 		in the same methodology through a message broker via defined message topics.
	Different messaging tools are based on the AMQP (Advanced Message Queuing Protocol). Some examples are given below.
	a. Apache Kafka
	b. RabbitMQ
	c. Apache ActiveMQ

What is the difference between Monolithic, SOA and Microservices Architecture?
	Monolithic Architecture is similar to a big container wherein all the software components of an application are assembled together 		and tightly packaged.
	A Service-Oriented Architecture is a collection of services which communicate with each other.
		The communication can involve either simple data passing or it could involve two or more services coordinating some activity.
	Microservice Architecture is an architectural style that structures an application as a collection of small autonomous services, 		modeled around a business domain.
	Main diff b/w SOA and MS architecture is Based on sharing of data and info. SOA shares and reuses as much as possible while MS 			focuses on sharing as little as possible

How to design microservices?
Microservices need to be designed by making use of the best practices like
•
•
A separate data store for each of the microservice.
The application needs to be split into loosely coupled microservices based on business functionality.
Decentralized framework.
Polyglot architecture as per the business needs.
Services to be designed, developed, deployed, and managed separately.
Domain-driven design
Real-time monitoring of the application should be possible.
Deploy in containers

Ways to communicate between Microservices
• We have seen Synchronous communications through
• Rest APIs
• GraphQ!
Feign using Eureka discoveries
GRPC (10 times faster than REST APIs ) - developed by Google as substitute of REST with many more features.
• A synchronous call means that a service waits for the response after performing a request.
• Today we will look at ways to do asynchronous communication in java. This communication usually involves some kind of messaging system like
• Active Mqs
• Rabbit MQs
Kafka


What is Async communication
In Async communication, To initiate such type of communication, a Microservice who wants to send some data to another Microservice publishes a message to a separate component known as a message broker. It is responsible for handling the message sent by the producer service and it will guarantee message delivery.
After the message is received by the broker, it's now its job to pass the message to the target service. If the recipient is down at the moment, the broker might be configured to retry as long as necessary for successful delivery.
• These messages can be persisted if required or stored only in memory. In the latter case, they will be lost when the broker is restarted and they are not yet sent to the consumer.
• Since the broker is responsible for delivering the message, it's no longer necessary for both services to be up for successful communication. Thus async messaging mitigates the biggest problem of synchronous communication - coupling.

A relevant point here is that there, the sender doesn't need to wait for the response. It might be sent back from the receiver later as another asynchronous message.
The intended service receives the message in its own time. The sending service is not locked to the broker. It simply fires and forgets.

What if the message broker is down?
• A message broker is a vital part of the asynchronous architecture and hence must be fault tolerant
• This can be achieved by setting up additional standby replicas that can do failover. Still, even with auxiliary replicas, failures of the messaging system might happen from time to time.
• If it's essential to ensure the message arrives at its destination, a broker might be configured to work in at-least-once mode. After the message reaches the consumer, it needs to send back ACK to the broker. If no acknowledgement gets to the broker, it will retry the delivery after some time.

Types of Async communication
Commonly, there are two options in message-based communication:
• Point to Point
• Publisher-Subscriber

What is PTP Async communication
• PTP - A queue will be used for this type of messaging-based communication.
• The service that produces the message, which is called as producer (sender), will send the message to a queue in one message broker and the service that has an interest in that message, which is called a consumer (receiver), will consume the message from that queue and carry out further processes for that message
One message sent by a producer can be consumed by only one receiver and the message will be deleted after consumed.
• If the receiver or an interested service is down, the message will remain persistent in that queue until the receiver is up and consumes the message.
• For this reason, messaging-based communication is one of the best choices to make our microservices resilient.
• A popular choice for the queueing system is RabbitMQ, ActiveMQ

What is Publisher-Subscriber Async communication
• In publisher-subscriber messaging-based communication, the topic in the message broker will be used to store the message sent by the publisher and then subscribers that subscribe to that topic will consume that message
• Unlike point to point pattern, the message will be ready to consume for all subscribers and the topic can have one or more subscribers. The message remains persistent in a topic until we delete it.
In messaging-based communication, the services that consume messages, either from queue or topic, must know the common message structure that is produced or published by producer or publisher.
examples are Kafka, Amazon SNS etc

What is Event Based Async communication
Unlike messaging-based communication, in event-based communication, especially in event-driven pattern, the services that consume the message do not need to know the details of the message.
• In event-driven pattern, the services just push the event to the topic in the message broker and then the services that subscribe to that topic will react for each occurrence event in that topic Each event in the topic will be related to a specific business logic execution.

How does synchronous and asynchronous communication work?
Applications generate messages in the form of calls to functions, services and APIs. The way an architect designs these communications affects the application's performance, resource consumption and ability to execute tasks.
• When microservices communicates synchronously, it sits idle until it receives a call, response, value or other data transfer. For example, synchronous execution occurs during vaccination slot booking, A user decides to book a slot, and the system generates a query to determine if slot is available. The app waits for a response before starting the slot booking process. This synchronous design prevents mismatches between slot booking and slot availability.
Conversely, asynchronous communication allows code to continue to run after it has generated a call or response. Asynchronous communication is particularly valuable for reporting and alerts, such as sending emails and text messages of slot booked to citizens

What did u use in your project and why? Pros and cons of each communication method
Both have potential pros and cons, but the method you choose depends on an application's purpose.
• Pros of Synchronous Communication
• Synchronous communication is simpler in design
Cons -
• carries the risk of spreading failures across services
• Way to mitigate failures in Synchronous communication -
The architect must implement sophisticated service discovery and application load balancing among microservices.


Pros of Asynchronous Communication
• Resilience and scalability
Provide better control over failures than synchronous setups
Loosely coupled Micro services.
Cons -
• Asynchronous communication has lesser architectural simplicity and data consistency

When to use which communication method
• When we start creating the application from scratch go with a synchronous system to optimize for speed of evolution
• And then once your microservices architecture grows and starts becoming complex and multifunctional then focus on switching to asynchronous communications. Identify all possible communications your microservice do to interact with order Microservices. Figure out if it strictly needs to be synchronous. If the response is really not necessary to proceed with other functionalities then convert that communication channel to Asynchronous communication channel ( like with ActiveMQ, Rabbit Mq, kafka etc)

Conclusion for Sync and Asyn communication
One of the traditional approaches for communicating between microservices is through their REST
APIs. However, as your system evolves and the number of microservices grows, communication becomes more complex, with services depending on each other or tightly coupled, slowing down development teams. This model can exhibit low latency but only works if services are made highly available.
To overcome this design disadvantage, new architectures aim to decouple senders from receivers, with asynchronous messaging. In a Kafka-centric architecture, low latency is preserved, with additional advantages like message balancing among available consumers and centralized management.
When dealing with a legacy platform , a recommended way to de-couple a monolith and ready it for a move to microservices is to implement asynchronous messaging.

SAGA Design Pattern
Why SAGA ??
We know that Design pattern gives solutions to common problems faced by us "THE DEVELOPERS".
So What problem is solved by this SAGA design pattern ?
• The problem started as soon as we moved from Monolithic application to Microservice Architecture.
• We will take example of Swiggy, zomato.
You
Choose your dishes,
Add them to Cart and checkout
Make Payment
Order gets Delivered
Our order is marked as completed after delivery is successful.
• In monolithic it's not a problem as we have 1 database, multiple Tables like Orders, Payments, Delivery Etc. Now in 1 Single Atomic transaction we can do all these steps and if payment fails, everything gets rolled back.

Now we moved to microservices architecture and Segregated the whole zomato or swiggy application to
Order service
Payment service
• Delivery Service
• Now your order service accepts your order, Payment service validates the payment done and Delivery service is responsible for delivery of your order to your home. When delivered successfully the orders is marked completed in the application. This is happy case.
• Ever thought about the worst case Delivery is failed as no delivery partner was available. Your payment was done, Money got deducted and now No food. At Least we need to get the money back and Order must be marked as cancelled.
• For this to happen we need a Transaction rollback . Transaction did get rolled back but only the scope of transaction was in Delivery service. The boundary for this transaction ended in Delivery service.

Now what about the order service and payment service ?? Neither your money is returned with this rollback nor your order status changed from waiting to failed / Cancelled. Such a bad user experience right ?
This is the classic example where your application completely failed to manage distributed transaction
(A transaction what spans across multiple Microservices). Now This is a problem and To handle such distributed transactions issues SAGA Design pattern came into picture.

What is SAGA
• A saga is that sequence of local transactions.

• Each Saga has 2 Jobs to Do
Update the current Microservice and make required changes.
Publish events to trigger the next transaction for the next microservices.

How SAGA DP handles failure of any individual SAGA?
•
•
The saga pattern provides transaction management with using a sequence of local transactions of microservices. Every microservices has its own database and it can able to manage local transaction in atomic way with strict consistency.
So saga pattern grouping these local transactions and sequentially invoking one by one. Each local transaction updates the database and publishes an event to trigger the next local transaction.
• If one of the step is failed, than saga patterns trigger to rollback transactions that are a set of compensating transactions that rollback the changes on pievious microservices and restore data consistency.

Ways to Implement SAGA?
• There are two type of saga implementation ways choreography orchestration

What is Choreography Saga Pattern?
• Choreography is a way to coordinate sagas where participants exchange events without a centralized point of control
• With choreography, each microservices run its own local transaction and publishes events to message broker system and that trigger local transactions in other microservices.

Advantages of Choreography Saga Pattern?
• Good for simple workflows that require few participants and don't need a coordination logic
• Doesn't require additional service implementation and maintenance.
• Doesn't introduce a single point of failure, since the responsibilities are distributed across the saga participants.

Disadvantages of Choreography Saga Pattern?
• Workflow can become confusing when adding new steps, as it's difficult to track which saga participants listen to which commands.
• There's a risk of cyclic dependency between saga participants because they have to consume each other's commands
• Integration testing is difficult because all services must be running to simulate a transaction.

What is Orchestration Saga Pattern?
• Orchestration is a way to coordinate sagas where a centralized controller tells the saga participants what local transactions to execute.
The saga orchestrator handles all the transactions and tells the participants which operation to perform based on events.
• The orchestrator°
executes saga requests,
stores and interprets the states of each task,
handles failure recovery with compensating transactions.

Advantages of Orchestration Saga Pattern?
• Good for complex workflows involving many participants or new participants added over time.

Suitable when there is control over every participant in the process, and control over the flow of activities.
• Doesn't introduce cyclic dependencies, because the orchestrator unilaterally depends on the saga participants.
Saga participants don't need to know about commands for other participants. Clear separation of concerns simplifies business logic.

Disadvantages of Orchestration Saga Pattern?
• Additional design complexity requires an implementation of a coordination logic.
• There's an additional point of failure, because the orchestrator manages the complete workflow.





How to design and implement a Microservices?
• Start with a monolith
• Organize Your Teams the Right Way
• Split the Monolith to Build a Microservices Architecture
• Build Your Microservices Architecture for Failure
• Emphasize Monitoring to Ease Microservices Testing
• Use CI/CD to make deployment process easy

Can you please provide examples of situations where using microservices over monolithic systems and vice versa is a better choice?
Scenarios where monolithic architecture is preferred over microservice Architecture
• Limited Complexity
Development Speed
• Resource Constraints
• Performance
• Team Size
• Learning Curve

Can you please provide examples of situations where using microservices over monolithic systems and vice versa is a better choice?
Scenarios where microservice architecture is preferred over monolithic Architecture
• Scalability
• Flexibility
Development Velocity
Team Structure
Complexity
Maintenance

How do you make sure a Microservices-based application can handle more users as it becomes more popular?
• Load Balancing
• Horizontal Scaling
Auto Scaling
Caching
Database Scaling
Asynchronous Processing

How to handle data consistency in a Microservices architecture?
•
Synchronous Communication
Asynchronous Communication
CQRS (Command Query Responsibility Segregation)
		CQRS suggests splitting the application into two parts — the command side and the query side. The command side handles the 		Create, Update, and Delete requests. The query side handles the query part by using the materialized views. The event 			sourcing pattern is generally used along with it to create events for any data change. Materialized views are kept updated by 		subscribing to the stream of events.
Event Sourcing
 		Triggering events (series of events)
Distributed Transaction
Saga Pattern
Monitoring and Logging
		Checks and monitors and logs the data inconsistency
Conflict Resolution

What is difference between SAGA and 2 Phase Commit? Which one will you prefer and why?
2 Phase Commit				Saga Pattern
Strong Consistency			Eventual Consistency
Synchronous				Asynchronous
Blocking				Non Blocking
Complexity				Simplicity
Performance Overhead			Better Performance
Strong Data Consistency			Temporarily Inconsistency

What is 2phase and 3phase commits?
The Two-Phase Commit (2PC) is a distributed transaction protocol used for ensuring data consistency and integrity across multiple nodes in a distributed system.
Three-Phase Commit is an extension of the Two-Phase Commit (2PC) protocol, with an additional phase to improve fault tolerance. 
hree-Phase Commit. Unlike the two-phase commit protocol (2PC), 3PC is non-blocking.
3PC adds a timeout mechanism and a pre-commit stage to 2PC, which can better solve the single point of failure and blocking problems. 








